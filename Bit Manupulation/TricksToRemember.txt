1. To get the Last Digit of number n ---> n & 1
2. To Count Number Of Digits in Base b of Number n ---> (log(n)/log(b))+1
3. To check if Number is Power of 2 or not ---> (n & (n-1))==0
4. To Remove last Set Bit --->  n & n-1
5. Total Number of Subsets ---> 2^n ---> 1<<n;
6. Get ith Bit ---> n & (1<<i)!=0 ? 1:0
7. Set ith Bit ---> n | (1<<i)
8. Clear the ith Bit ---> n & ~(1<<i)
9. Update the ith Bit ---> n ^ (1<<i)
10. Swap two number
        a=a^b;
        b=a^b;
        a=a^b;
11. XOR of Number from 1 to n
        n%4==1 ---> 1
        n%4==2 ---> n+1
        n%4==3 ---> 0
        n%4==0 ---> n
12. 2^x= 1<<x 
13. Set the Rightmost Unset Bit ---> N | ~N & (N + 1)
14. 0^n=n 
15. 0&n=0;
16. To Check if a Number is Odd or Even:
        n & 1 == 0 (Even)
        n & 1 == 1 (Odd)
17. Flip all Bits of n (One's Complement) ---> ~n 
18. Get the Lowest Set Bit of n ---> n & -n 
19. Turn off the Rightmost Set Bit ---> n & (n - 1)
20. Isolate the Rightmost 0 Bit ---> ~n & (n + 1)
21. Get the Highest Power of 2 less than or equal to n ---> 1 << (n.bit_length() - 1)
22. 


